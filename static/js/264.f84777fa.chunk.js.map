{"version":3,"file":"static/js/264.f84777fa.chunk.js","mappings":"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","sources":["components/LoginAndRegister/LoginAndRegister.styled.js","components/LoginAndRegister/Register.jsx","pages/RegisterPage.jsx"],"sourcesContent":["import color from 'common/GlobalColers'\nimport styled from 'styled-components'\nimport { Field } from 'formik';\nimport { NavLink } from 'react-router-dom';\n\nexport const Container = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center ;\n`\n\nexport const LoginContainer = styled.div`\n  position: relative;\n  width: 375px;\n  height: 812px;\n  padding: 24px 20px;\n\n  @media (min-width: 768px) {\n    width: 768px;\n    height: 1024px;\n    padding: 24px 32px;\n  }\n  @media (min-width: 1440px) {\n    width: 1440px;\n    height: 800px;\n    padding: 28px  100px;\n  }\n`\nexport const TableContents = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  width: 100%;\n`\nexport const TableContentsNavLink = styled(NavLink)`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-top: 10px;\n  font-size: 12px; \n  letter-spacing: -0.2px;\n  color: ${color.blackModalColr}; \n  transition: color 0.3s linear; \n  text-decoration: none;\n  &:hover,\n  &:focus {\n    text-decoration: none;\n    color: ${color.greenDarker};\n    outline: none;\n }\n &:active {\n    color: black;\n  }\n  @media (min-width: 768px) {\n    font-size: 14px;\n  }\n`\n\nexport const ElementsSvg = styled.svg`\n  position: absolute;\n  right: -180px;\n  bottom: -188px;\n  width: 464px;\n  height: 345px;\n  @media (min-width: 768px) {\n    right: -180px;\n    bottom: -88px;\n  }\n`\nexport const ContextContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 40px;\n  margin-top: 148px;\n\n  @media (min-width: 768px) {\n    gap: 50px;\n    margin-top: 204px;\n  }\n  @media (min-width: 1440px) {\n    gap: 150px;\n    flex-direction: row;\n    margin-top: 226px;\n  }\n`\n///////////////////////////////////////////////////\nexport const TitleContainer = styled.div`\n  position: relative;\n\n  @media (min-width: 768px) {\n    width: 614px;\n  }\n`\nexport const WhitePill = styled.img`\n  position: absolute;\n  top: -58px;\n  right: 20px;\n  width: 95px;\n  height: 93px;\n\n  @media (min-width: 768px) {\n    top: -104px;\n    width: 179px;\n    height: 175px;\n  }\n`\nexport const Title = styled.h2`\n  font-size: 28px;\n  font-weight: 600;\n  line-height: 1.2;\n\n  @media (min-width: 768px) {\n    font-size: 54px;\n    font-weight: 600;\n    line-height: 1.1;\n  }\n`\nexport const TitleSpan = styled.span`\n  color:${color.greenLight};\n`\n\nexport const FormContainer = styled.div`\n  @media (min-width: 768px) {\n    width: 323px;\n  }\n`\n\nexport const FormFields = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 40px;\n`;\n\nexport const FormConteiner = styled.div`\n  display:flex;\n  flex-direction: column;\n  gap: 14px;\n`;\n\nexport const FormFieldConteiner = styled.div`\n  position:relative;\n  width: 100%;\n  height:44px;\n`;\n\nexport const FormField = styled(Field)`\n  width: 100%;\n  height: 44px;\n  border: 1px solid\t${color.blackPrimarySecondary};\n  border-radius: 60px;\n  padding: 13px 18px;\n  outline: none;\n  background: ${color.white};\n`;\n\nexport const EyeSvg = styled.svg`\n  position: absolute;\n  top: 13px;\n  right: 18px;\n  cursor: pointer;\n  stroke: ${color.blackPrimary};\n  fill: none;\n`;","import {  Formik, Form } from 'formik';\nimport * as Yup from 'yup';\nimport { useState } from 'react';\nimport sprite from '../../img/sprite.svg';\nimport { useDispatch } from 'react-redux';\nimport { register } from '../../redux/auth/operationsAuth';\nimport { toast } from 'react-toastify';\nimport { useNavigate } from 'react-router-dom';\nimport { Container, ContextContainer, ElementsSvg, EyeSvg, FormContainer, FormConteiner, FormField, FormFieldConteiner, FormFields, LoginContainer, TableContentsNavLink, Title, TitleContainer, TitleSpan, WhitePill } from './LoginAndRegister.styled';\nimport Logo from 'components/Logo/Logo';\nimport whiteRoundPill from '../../img/whiteRoundPill/white-round-pill.png';\nimport whiteRoundPill2x from '../../img/whiteRoundPill/white-round-pill@2x.png';\nimport CustomButton from 'components/CustomButton/CustomButton';\n\nconst initialValues = {\n  userName: '',\n  email: '',\n  password: '',\n};\n  \nconst schema = Yup.object({\n  userName: Yup.string().required('Required').min(2, \"The name must have at least 2 letters\"),\n  email: Yup.string().matches(/^\\w+@[a-zA-Z_]+?\\.[a-zA-Z]{2,3}$/, 'Invalid email address').required('Required'),\n  password: Yup.string().required('Required').min(7, \"Password must be at least 7 characters\"),\n});\n\nexport default function Register() {\n  const [showPassword, setShowPassword] = useState(false);\n\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  const togglePasswordVisibility = () => {\n    setShowPassword((prevShowPassword) => !prevShowPassword);\n  };  \n  \n  const handleSubmit = async (values) => {\n    try {\n      await dispatch(register(values)).unwrap();\n      navigate('/dashboard');\n    } catch (error) {\n      if (error === \"Request failed with status code 409\") {\n        toast.error(\"User with this email already exists.\");\n      } else {\n        toast.error(\"Registration failed. Please try again later.\");\n      }\n    }\n  }\n\n  return (\n    <Container>\n      <LoginContainer>\n        <ElementsSvg >\n          <use href={`${sprite}#icon-elements`} />\n        </ElementsSvg>\n        <Logo />\n        <ContextContainer>\n          <TitleContainer>\n            <picture>\n              <source srcSet={`${whiteRoundPill2x} 2x`}  media=\"(min-resolution: 192dpi)\"  />\n              <WhitePill src={whiteRoundPill} alt=\"logo\" />\n            </picture> \n            <Title>Your medication, delivered Say goodbye to all <TitleSpan>your healthcare</TitleSpan> worries with us</Title>\n          </TitleContainer>\n          <FormContainer>\n            <Formik  initialValues = {initialValues} validationSchema={schema} onSubmit={handleSubmit} >\n              {({ errors, touched }) => (\n                <Form>\n                  <FormFields>  \n                    <FormConteiner>  \n              \n                      <FormFieldConteiner>\n                        <FormField\n                          id=\"userName\" \n                          name=\"userName\" \n                          type=\"userName\" \n                          placeholder=\"Nik Ovson\" \n                          error={errors.userName && touched.userName ? \"true\" : \"false\" } \n                          paddingleft=\"65px\"\n                          style={{\n                            borderColor: touched.userName && errors.userName ? \"red\" : \n                                         touched.userName && !errors.userName ? \"green\" : \"defaultColor\",\n                          }}\n                        />\n                      </FormFieldConteiner>\n                        \n                      <FormFieldConteiner>\n                        <FormField \n                          id=\"email\" \n                          name=\"email\" \n                          type=\"email\" \n                          placeholder=\"nik@google.com\" \n                          error={errors.email && touched.email ? \"true\" : \"false\" } \n                          paddingleft=\"53px\"\n                          style={{\n                            borderColor: touched.email && errors.email ? \"red\" : \n                                         touched.email && !errors.email ? \"green\" : \"defaultColor\",\n                          }}\n                        />\n                      </FormFieldConteiner>\n                        \n                      <FormFieldConteiner>\n                        <FormField \n                          id=\"password\" \n                          name=\"password\" \n                          type={showPassword ? \"text\" : \"password\"} \n                          placeholder=\"********\" \n                          paddingleft=\"86px\"\n                          style={{\n                            borderColor: touched.password && errors.password ? \"red\" : \n                                         touched.password && !errors.password ? \"green\" : \"defaultColor\",\n                          }}\n                        />\n                        {showPassword ? (\n                          <EyeSvg width={18} height={18} onMouseDown={(e) => {\n                            e.preventDefault(); \n                            togglePasswordVisibility();\n                          }}>\n                            <use href={`${sprite}#icon-eye`} />\n                          </EyeSvg>\n                        ) : (\n                          <EyeSvg width={18} height={18} onMouseDown={(e) => {\n                            e.preventDefault(); \n                            togglePasswordVisibility();\n                          }}>\n                            <use href={`${sprite}#icon-eye-off`} />\n                          </EyeSvg>\n                        )}\n                      </FormFieldConteiner>\n                            \n                    </FormConteiner>     \n                    <CustomButton label=\"Register\" />\n                  </FormFields>                    \n                </Form>\n              )}\n            </Formik>\n            <TableContentsNavLink to=\"/login\" >Login</TableContentsNavLink>\n          </FormContainer>\n        </ContextContainer>\n      </LoginContainer>\n    </Container>\n  );\n}","import Register from \"components/LoginAndRegister/Register\";\n\nexport default function LoginPage() {  \n  return (\n    <Register />\n  );\n}"],"names":["Container","styled","_templateObject","_taggedTemplateLiteral","LoginContainer","_templateObject2","TableContentsNavLink","_templateObject3","NavLink","_templateObject4","color","ElementsSvg","_templateObject5","ContextContainer","_templateObject6","TitleContainer","_templateObject7","WhitePill","_templateObject8","Title","_templateObject9","TitleSpan","_templateObject10","FormContainer","_templateObject11","FormFields","_templateObject12","FormConteiner","_templateObject13","FormFieldConteiner","_templateObject14","FormField","Field","_templateObject15","EyeSvg","_templateObject16","initialValues","userName","email","password","schema","Yup","required","min","matches","Register","_useState","useState","_useState2","_slicedToArray","showPassword","setShowPassword","dispatch","useDispatch","navigate","useNavigate","togglePasswordVisibility","prevShowPassword","handleSubmit","_ref","_asyncToGenerator","_regeneratorRuntime","_callee","values","_context","prev","next","register","unwrap","t0","toast","stop","_x","apply","arguments","_jsx","children","_jsxs","href","concat","sprite","Logo","srcSet","whiteRoundPill2x","media","src","whiteRoundPill","alt","Formik","validationSchema","onSubmit","_ref2","errors","touched","Form","id","name","type","placeholder","error","paddingleft","style","borderColor","width","height","onMouseDown","e","preventDefault","CustomButton","label","to","LoginPage"],"sourceRoot":""}