{"version":3,"file":"static/js/555.0f3965a9.chunk.js","mappings":"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","sources":["components/Dashboard/Dashboard.styled.js","components/DashboardIncomeExpenses/DashboardIncomeExpenses.jsx","components/DashboardRecentCustomers/DashboardRecentCustomers.styled.js","components/DashboardRecentCustomers/DashboardRecentCustomers.jsx","components/DashboardStatistic/DashboardStatistic.styled.js","redux/ePharmacy/selector.js","components/DashboardStatistic/DashboardStatistic.jsx","components/Dashboard/Dashboard.jsx","pages/DashboardPage.jsx"],"sourcesContent":["import color from 'common/GlobalColers'\nimport styled from 'styled-components'\n\nexport const  TableConteiner = styled.div`\n  display: flex;\n  gap: 20px;\n`\n\nexport const  TableBlockItem = styled.div`\n\n  width: 630px;\n  height: 512px;\n  /* border: 1px solid red; */\n\n  border: 1px solid ${color.blackPrimarySecondary};\n  border-radius: 8px;\n  background: rgb(255, 255, 255);\n`","// import { selectDataInf } from '../../redux/ePharmacy/selector';\n// import { useEffect } from 'react';\n// import { dashboardInf } from '../../redux/ePharmacy/operations';\n// import { useDispatch, useSelector } from 'react-redux';\nimport { Cell, Column, Table } from \"@blueprintjs/table\";\nimport { TableBlockItem } from \"components/Dashboard/Dashboard.styled\";\n\nexport default function DashboardIncomeExpenses() {  \n  // const dispatch = useDispatch();\n  // const data = useSelector(selectDataInf);  \n\n  // useEffect(() => {\n  //   dispatch(dashboardInf());\n  // }, [dispatch]);\n\n  // console.log(data)\n\n  const data = [\n    // Предполагаем, что каждый массив - это строка данных\n    [\"Данные ячейки 1\", \"Данные ячейки 2\", \"Данные ячейки 3\"],\n    [\"Данные ячейки 11\", \"Данные ячейки 22\", \"Данные ячейки 33\"],\n    [\"Данные ячейки 111\", \"Данные ячейки 222\", \"Данные ячейки 333\"],\n  ];\n\n  return (\n    <TableBlockItem>\n    <Table numRows={data.length} resizable={false}>\n      <Column name=\"Название столбца 1\" cellRenderer={(rowIndex) => <Cell>{data[rowIndex][0]}</Cell>} />\n      <Column name=\"Название столбца 2\" cellRenderer={(rowIndex) => <Cell>{data[rowIndex][1]}</Cell>} />\n      <Column name=\"Название столбца 3\" cellRenderer={(rowIndex) => <Cell>{data[rowIndex][2]}</Cell>} />\n    </Table>\n    </TableBlockItem>\n  )\n}","import { Cell } from '@blueprintjs/table'\nimport color from 'common/GlobalColers'\nimport styled from 'styled-components'\n\nexport const ColumnCell = styled(Cell)`\n  display: flex;\n  align-items: center;\n  background: ${color.white};\n  padding-left: 20px;\n  /* position: relative;\n  border-bottom: 1px solid ${color.red}; // Горизонтальные границы\n\n  &:not(:last-child)::after {\n    content: '';\n    position: absolute;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    width: 1px; // Ширина вертикальной границы\n    background-color: ${color.red}; // Цвет вертикальной границы\n  } */\n  /* border-bottom: 1px solid ${color.red}; // Горизонтальные границы\n  position: relative;\n\n  &:not(:last-child)::after {\n    content: '';\n    position: absolute;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    border-right: 1px solid ${color.red}; // Вертикальные границы\n  } */\n\n  /* &:last-child {\n    border-bottom: none; // Убирает горизонтальную границу у последней строки\n  } */\n`\n\nexport const TableHeader = styled.div`\n  height: 64px;\n  /* border: 1px solid ${color.blackPrimarySecondary}; */\n  border-radius: 8px 8px 0px 0px;\n  background: ${color.greenSupperLight};\n  padding: 20px;\n`\nexport const HeaderStyle = styled.div`\ndisplay: flex;\nalign-items: center;\njustify-content: center;\n\n/* border: none;\nbox-shadow: none;  */\n\n  .bp5-table-header {\n    display: flex;\n    align-items: center;\n    height: 58px;\n    background-color: ${color.white}; \n    padding-left: 10px;\n\n    font-size: 14px;  \n    font-weight: 500;\n    color: ${color.textColorSecondary};\n    /* box-shadow: none; */\n  }\n  .bp5-table-container {    \n    box-shadow: none;    \n  }\n .bp5-table-cell {  \n    /* box-shadow: none;  */\n}\n\n/* .bp5-table-cell {\n  position: relative; /* Allows absolute positioning of pseudo-elements relative to cells */\n} */\n\n/* Adding a right border to all cells except the last one in a row */\n/* .bp5-table-cell:not(:last-child)::after {\n  content: '';\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  border-right: 1px solid red;\n} */\n\n  /* .bp5-table-cell,\n.bp5-table-row,\n.bp5-table-quadrant,\n.bp5-table-quadrant-scroll-container {\n  border: none !important;\n  background-color: transparent !important;\n\n} */\n\n  /* .bp5-table-selection-enabled.bp5-table-menu {\n    display:none;\n} */\n/* .bp5-table-row-headers {\n    display:none;\n    \n} */\n\n  /* .bp5-table-column-name {\n    background-color: white  ;\n  } */\n`\n","// import { selectDataInf } from '../../redux/ePharmacy/selector';\n// import { useEffect } from 'react';\n// import { dashboardInf } from '../../redux/ePharmacy/operations';\n// import { useDispatch, useSelector } from 'react-redux';\n// import { HotkeysProvider } from \"@blueprintjs/core\";\nimport { Column, Table2 } from \"@blueprintjs/table\";\nimport { TableBlockItem } from \"components/Dashboard/Dashboard.styled\";\nimport { ColumnCell, HeaderStyle, TableHeader } from \"./DashboardRecentCustomers.styled\";\n\n\nexport default function DashboardRecentCustomers() {  \n  // const dispatch = useDispatch();\n  // const data = useSelector(selectDataInf);  \n\n  // useEffect(() => {\n  //   dispatch(dashboardInf());\n  // }, [dispatch]);\n\n  // console.log(data)\n  const data = [\n    // Предполагаем, что каждый массив - это строка данных\n    [\"Alex Shatov\", \"alexshatov@gmail.com\", \"2,890.66\"],\n    [\"Данные ячейки 11\", \"Данные ячейки 22\", \"2222222\"],\n    [\"Данные ячейки 111\", \"Данные ячейки 222\", \"3333333\"],\n    [\"Данные ячейки 4\", \"Данные ячейки 5\", \"4444444\"],\n    [\"Данные ячейки 7\", \"Данные ячейки 8\", \"5555555\"],\n  ];\n\n\n  const nameColumn = (rowIndex) => (\n    <ColumnCell >{data[rowIndex][0]}</ColumnCell>\n  );\n  const emailColumn = (rowIndex) => (\n    <ColumnCell>{data[rowIndex][1]}</ColumnCell>\n  );\n  const spendColumn = (rowIndex) => (\n    <ColumnCell>{data[rowIndex][2]}</ColumnCell>\n  );\n\n  return (    \n    <TableBlockItem>\n      <TableHeader>\n        <h2>Recent Customers</h2>\n      </TableHeader>\n      <HeaderStyle >\n      <Table2  \n        numRows={data.length} \n        defaultRowHeight={76} \n        columnWidths={[203, 269, 118 ]} \n        enableColumnResizing={false} \n        enableRowResizing={false} \n        enableRowHeader={false}\n      >\n        <Column name=\"Name\"  cellRenderer={nameColumn} />\n        <Column name=\"Email\"  cellRenderer={emailColumn} />\n        <Column name=\"Spent\"  cellRenderer={spendColumn}/>\n      </Table2>\n      </HeaderStyle>\n    </TableBlockItem>\n  )\n}","import color from 'common/GlobalColers'\nimport styled from 'styled-components'\n\nexport const StatisticConteiner = styled.div`\n  display: flex;\n  gap: 20px;\n`\n\nexport const StatisticItem  = styled.li`\n  width: 240px;\n  height: 108px;\n  border-radius: 8px;\n  background: ${color.white};\n  border: 1px solid ${color.blackPrimarySecondary};\n  padding: 14px 18px;\n\n\n  fill: transparent;\n  stroke: ${color.blackPrimary};\n  &:first-child {\n    border-color: ${color.greenLight};\n  }\n`\nexport const StatisticTitleConteiner = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  margin-bottom: 28px;\n  \n`\n\nexport const StatisticSectionTitle = styled.h4`\n  font-size: 12px;\n  font-weight: 400;\n  color: ${color.textColorSecondary};\n  \n`\nexport const StatisticValue = styled.p`\n  font-size: 24px;\n  font-weight: 600;\n  line-height: 1.33;\n  \n`","export const selectDataInf = (state) => state.pharmacy.dashboarData;\n\n// export const selectTakeWaterHistory = (state) => state.water.history;\n\n// export const selectStageWater = (state) => state.water;\n\n// export const selectMounthWater = (state) => state.water.mounthHistory;\n\n// export const selectStatusOperation = (state) => state.water.statusOperation;\n","import { useDispatch, useSelector } from 'react-redux';\nimport sprite from '../../img/sprite.svg';\nimport { StatisticConteiner, StatisticItem, StatisticSectionTitle, StatisticTitleConteiner, StatisticValue } from './DashboardStatistic.styled';\nimport { selectDataInf } from '../../redux/ePharmacy/selector';\nimport { useEffect } from 'react';\nimport { dashboardInf } from '../../redux/ePharmacy/operations';\n\nexport default function DashboardStatistic() {  \n  const dispatch = useDispatch();\n  const data = useSelector(selectDataInf);\n  \n  const statistic = [\n    { name: \"products\", icon: \"#icon-streamline\", value: `${data.productsCount}` },\n    { name: \"suppliers\", icon: \"#icon-users\", value: `${data.suppliersCount}` },\n    { name: \"customers\", icon: \"#icon-users\", value: `${data.customersCount}` },\n  ];\n  useEffect(() => {\n    dispatch(dashboardInf());\n  }, [dispatch]);\n\n  return (\n    <StatisticConteiner>\n      {statistic.map(link => (        \n        <StatisticItem key={link.name} >\n          <StatisticTitleConteiner>\n            <svg width={20} height={20}>\n              <use href={`${sprite}${link.icon}`} />\n            </svg>\n            <StatisticSectionTitle>All {link.name}</StatisticSectionTitle>\n          </StatisticTitleConteiner>\n          <StatisticValue>{data.customersCount ? link.value : 0}</StatisticValue>\n        </StatisticItem>\n      ))}\n    </StatisticConteiner>\n  );\n}","import { ContentBlock, ContentContainer } from \"common/GiobalStyles\";\nimport DashboardIncomeExpenses from \"components/DashboardIncomeExpenses/DashboardIncomeExpenses\";\nimport DashboardRecentCustomers from \"components/DashboardRecentCustomers/DashboardRecentCustomers\";\nimport DashboardStatistic from \"components/DashboardStatistic/DashboardStatistic\";\nimport { TableConteiner } from \"./Dashboard.styled\";\n\n\nexport default function Dashboard() {  \n\n  return (\n    <ContentContainer>\n      <ContentBlock>\n        <DashboardStatistic />\n\n        <TableConteiner>\n          <DashboardRecentCustomers />\n          <DashboardIncomeExpenses />\n        </TableConteiner>\n\n      </ContentBlock>\n    </ContentContainer>\n  );\n}","import Dashboard from \"components/Dashboard/Dashboard\";\n\nexport default function DashboardPage() {\n  return (\n    <Dashboard />\n  );\n}  "],"names":["TableConteiner","styled","_templateObject","_taggedTemplateLiteral","TableBlockItem","_templateObject2","color","DashboardIncomeExpenses","data","_jsx","children","_jsxs","Table","numRows","length","resizable","Column","name","cellRenderer","rowIndex","Cell","ColumnCell","TableHeader","HeaderStyle","_templateObject3","DashboardRecentCustomers","Table2","defaultRowHeight","columnWidths","enableColumnResizing","enableRowResizing","enableRowHeader","StatisticConteiner","StatisticItem","StatisticTitleConteiner","StatisticSectionTitle","_templateObject4","StatisticValue","_templateObject5","selectDataInf","state","pharmacy","dashboarData","DashboardStatistic","dispatch","useDispatch","useSelector","statistic","icon","value","concat","productsCount","suppliersCount","customersCount","useEffect","dashboardInf","map","link","width","height","href","sprite","Dashboard","ContentContainer","ContentBlock","DashboardPage"],"sourceRoot":""}