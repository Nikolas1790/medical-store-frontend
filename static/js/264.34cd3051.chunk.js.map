{"version":3,"file":"static/js/264.34cd3051.chunk.js","mappings":"gSAmBeA,EAAAA,GAAW,CACxBC,KAAMD,EAAAA,KAAaE,SAAS,YAAYC,IAAI,EAAG,yCAC/CC,MAAOJ,EAAAA,KAAaK,QAAQ,mCAAoC,yBAAyBH,SAAS,YAClGI,SAAUN,EAAAA,KAAaE,SAAS,YAAYC,IAAI,EAAG,4CAOtC,SAASI,IACtB,IAAAC,GAAwCC,EAAAA,EAAAA,WAAS,GAAMC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAApCE,EAAA,GAAiBA,EAAA,IAEnBE,EAAAA,EAAAA,OACAC,EAAAA,EAAAA,MAmBjB,OACEC,EAAAA,EAAAA,KAAA,OAAAC,SAAK,sBA2HT,CC7Ke,SAASC,IACtB,OACEF,EAAAA,EAAAA,KAACP,EAAQ,GAEb,C","sources":["components/LoginAndRegister/Register.jsx","pages/RegisterPage.jsx"],"sourcesContent":["import {  Formik, Form } from 'formik';\nimport * as Yup from 'yup';\nimport { useState } from 'react';\nimport sprite from '../../img/sprite.svg';\n// import { Container, ErrorMessageStyled, TopRightSvg, FormBlock, FormConteiner, FormField, FormFieldConteiner, FormFieldLabel, FormFields, SecureMessage } from \"./RegisterAndLogin.styled\";\n// import ImgAutorization from 'components/ImgAuthorization/ImgAuthorization';\n// import LogoTitleBlock from 'components/LogoTitleBlock/LogoTitleBlock';\n// import SubmitBlockRegister from 'components/SubmitBlockAutorization/SubmitBlockRegister';\nimport { useDispatch } from 'react-redux';\nimport { register } from '../../redux/auth/operationsAuth';\nimport { toast } from 'react-toastify';\nimport { useNavigate } from 'react-router-dom';\n\nconst initialValues = {\n  name: '',\n  email: '',\n  password: '',\n};\n  \nconst schema = Yup.object({\n  name: Yup.string().required('Required').min(2, \"The name must have at least 2 letters\"),\n  email: Yup.string().matches(/^\\w+@[a-zA-Z_]+?\\.[a-zA-Z]{2,3}$/, 'Invalid email address').required('Required'),\n  password: Yup.string().required('Required').min(7, \"Password must be at least 7 characters\"),\n});\n\n\n\n\n\nexport default function Register() {\n  const [showPassword, setShowPassword] = useState(false);\n\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  const togglePasswordVisibility = () => {\n    setShowPassword((prevShowPassword) => !prevShowPassword);\n  };  \n  \n  const handleSubmit = async (values) => {\n    try {\n      await dispatch(register(values)).unwrap();\n      navigate('/recommended');\n    } catch (error) {\n      if (error === \"Request failed with status code 409\") {\n        toast.error(\"User with this email already exists.\");\n      } else {\n        toast.error(\"Registration failed. Please try again later.\");\n      }\n    }\n  }\n\n  return (\n    <div>yyugutftufufuuyffy</div>\n    // <Container>\n    //   <FormBlock>        \n    //     <LogoTitleBlock />\n    //     <Formik  initialValues = {initialValues} validationSchema={schema} onSubmit={handleSubmit} >\n\n    //       {({ errors, touched }) => (\n    //         <Form>\n    //           <FormFields>  \n    //             <FormConteiner>  \n\n    //               <FormFieldConteiner>\n    //                 <FormFieldLabel htmlFor=\"name\">Name:</FormFieldLabel>\n    //                 <FormField \n    //                   id=\"name\" \n    //                   name=\"name\" \n    //                   type=\"name\" \n    //                   placeholder=\"Nik Ovson\" \n    //                   error={errors.name && touched.name ? \"true\" : \"false\" } \n    //                   paddingleft=\"65px\"\n    //                   style={{\n    //                     borderColor: touched.name && errors.name ? \"red\" : \n    //                                  touched.name && !errors.name ? \"green\" : \"defaultColor\",\n    //                   }}\n    //                 />\n    //                   {touched.name && (\n    //                     errors.name ? (\n    //                       <TopRightSvg width={20} height={20}>\n    //                         <use href={`${sprite}#icon-pajamas_error`} />\n    //                       </TopRightSvg>\n    //                     ) : (\n    //                       <TopRightSvg width={20} height={20}>\n    //                         <use href={`${sprite}#icon-check-ok`} />\n    //                       </TopRightSvg>\n    //                     )\n    //                   )}\n    //                  {touched.name && !errors.name && <SecureMessage>Name is secure</SecureMessage>}\n    //                 <ErrorMessageStyled name=\"name\" component='div' />\n    //               </FormFieldConteiner>\n                    \n    //               <FormFieldConteiner>\n    //                 <FormFieldLabel htmlFor=\"email\">Mail:</FormFieldLabel>\n    //                 <FormField \n    //                   id=\"email\" \n    //                   name=\"email\" \n    //                   type=\"email\" \n    //                   placeholder=\"nik@google.com\" \n    //                   error={errors.email && touched.email ? \"true\" : \"false\" } \n    //                   paddingleft=\"53px\"\n    //                   style={{\n    //                     borderColor: touched.email && errors.email ? \"red\" : \n    //                                  touched.email && !errors.email ? \"green\" : \"defaultColor\",\n    //                   }}\n    //                 />\n    //                   {touched.email && (\n    //                     errors.email ? (\n    //                       <TopRightSvg width={20} height={20}>\n    //                         <use href={`${sprite}#icon-pajamas_error`} />\n    //                       </TopRightSvg>\n    //                     ) : (\n    //                       <TopRightSvg width={20} height={20}>\n    //                         <use href={`${sprite}#icon-check-ok`} />\n    //                       </TopRightSvg>\n    //                     )\n    //                   )}\n    //                  {touched.email && !errors.email && <SecureMessage>Email is secure</SecureMessage>}\n    //                 <ErrorMessageStyled name=\"email\" component='div' />\n    //               </FormFieldConteiner>\n          \n    //               <FormFieldConteiner>\n    //                 <FormFieldLabel htmlFor=\"password\">Password:</FormFieldLabel>\n    //                 <FormField \n    //                   id=\"password\" \n    //                   name=\"password\" \n    //                   type={showPassword ? \"text\" : \"password\"} \n    //                   placeholder=\"********\" \n    //                   paddingleft=\"86px\"\n    //                   style={{\n    //                     borderColor: touched.password && errors.password ? \"red\" : \n    //                                  touched.password && !errors.password ? \"green\" : \"defaultColor\",\n    //                   }}\n    //                 />\n                      \n    //                 {errors.password && touched.password ? (\n    //                   <TopRightSvg width={20} height={20}>\n    //                     <use href={`${sprite}#icon-pajamas_error`} />\n    //                   </TopRightSvg>\n    //                 ) : !errors.password && touched.password ? (\n    //                   <TopRightSvg width={20} height={20}>\n    //                     <use href={`${sprite}#icon-check-ok`} />\n    //                   </TopRightSvg>\n    //                 ) : showPassword ? (\n    //                   <TopRightSvg width={20} height={20} onMouseDown={(e) => {\n    //                     e.preventDefault();\n    //                     togglePasswordVisibility();\n    //                   }}>\n    //                     <use href={`${sprite}#icon-eye`} />\n    //                   </TopRightSvg>\n    //                 ) : (\n    //                   <TopRightSvg width={20} height={20} onMouseDown={(e) => {\n    //                     e.preventDefault(); \n    //                     togglePasswordVisibility();\n    //                   }}>\n    //                     <use href={`${sprite}#icon-eye-off`} />\n    //                   </TopRightSvg>\n    //                 )}\n\n    //                  {touched.password && !errors.password && <SecureMessage>Password is secure</SecureMessage>}\n    //                 <ErrorMessageStyled name=\"password\" component='div'/>\n\n    //               </FormFieldConteiner>\n\n    //             </FormConteiner>     \n   \n    //             <SubmitBlockRegister />\n    //           </FormFields>                    \n    //         </Form>\n    //       )}\n    //     </Formik>\n    //   </FormBlock>\n    //   <ImgAutorization />\n    // </Container>\n  );\n}","import Register from \"components/LoginAndRegister/Register\";\n\n\nexport default function LoginPage() {  \n  return (\n    <Register />\n  );\n}"],"names":["Yup","name","required","min","email","matches","password","Register","_useState","useState","_useState2","_slicedToArray","useDispatch","useNavigate","_jsx","children","LoginPage"],"sourceRoot":""}