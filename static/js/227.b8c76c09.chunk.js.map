{"version":3,"file":"static/js/227.b8c76c09.chunk.js","mappings":"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","sources":["components/ProductsAll/ProductsAll.styled.js","components/ActionBlock/ActionBlock.styled.js","components/Modals/ProductModal.jsx","components/ActionBlock/ActionBlock.jsx","components/ProductsAll/ProductsAll.jsx","components/Products/Products.styled.js","components/Products/Products.jsx","pages/ProductsPage.jsx"],"sourcesContent":["import { getBackgroundStatusColor, getStatusColor } from 'components/Utils/utils'\nimport styled from 'styled-components'\n\n\nexport const StatucColor = styled.p`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 92px;\n  height: 25px;\n  color: ${({ type }) => getStatusColor(type)};\n  background: ${({ type }) => getBackgroundStatusColor(type)};\n\n  font-size: 14px;\n  border-radius: 40px;\n\n`\n\n// export const ActionConteiner = styled.div`\n//   display: flex;\n//   align-items: center;\n//   justify-content: center;\n//   gap: 8px;\n\n// `","import styled from 'styled-components'\n\nexport const ActionConteiner = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 8px;\n\n`","import { useFormik } from 'formik';\nimport * as Yup from 'yup';\n\nimport { BtnConteiner, ClosingSymbol, ColumnConteiner, Conteiner, Input, InputConteiner, Title } from \"./Modals.styled\";\nimport sprite from '../../img/sprite.svg';\nimport CustomButton from \"components/CustomButton/CustomButton\";\nimport CustomButtonCansel from \"components/CustomButtonCansel/CustomButtonCansel\";\nimport { useEffect, useRef, useState } from 'react';\nimport { AVAILABLE_CATEGORIES } from 'components/Utils/utils';\nimport { useDispatch } from 'react-redux';\nimport { addProduct, updateProduct } from '../../redux/ePharmacy/operations';\nimport ModalSelector from './ModalSelector/ModalSelector';\n\nconst validationSchema = Yup.object({\n  name: Yup.string().required('Product info is required'),\n  category: Yup.string().oneOf(AVAILABLE_CATEGORIES, 'Invalid category').required('Category is required'),\n  stock: Yup.number().required('Stock is required').positive('Stock must be positive'),\n  suppliers: Yup.string().required('Suppliers are required'),\n  price: Yup.number().required('Price is required').positive('Price must be positive'),\n});\n\nexport default function ProductModals({ closeModals, isUpdate, existingProduct }) {  \n  const [selectedLevels, setSelectedLevels] = useState(\"\");\n  const [isDropdownOpen, setIsDropdownOpen] = useState(false);\n  const dropdownRef = useRef(null);\n  const dispatch = useDispatch();\n  const id = existingProduct?.[5];\n\n  useEffect(() => {\n    const handleOutsideClick = (event) => {\n      if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {\n        // console.log(dropdownRef.current.contains(event.target))\n        setIsDropdownOpen(false); \n      }\n    };\n    document.addEventListener('mousedown', handleOutsideClick);\n    return () => document.removeEventListener('mousedown', handleOutsideClick);\n  }, []); \n\n  const initialValues = isUpdate ? {\n    name: existingProduct?.[0],\n    category: existingProduct?.[1],\n    stock: existingProduct?.[2], \n    suppliers: existingProduct?.[3],\n    price: existingProduct?.[4],\n  } : {\n    name: '',\n    category: '',\n    stock: '',\n    suppliers: '',\n    price: '',\n  };\n\n    // Инициализация Formik\n  const formik = useFormik({\n    initialValues: initialValues,\n    validationSchema,\n    onSubmit: (values, { resetForm }) => {\n      isUpdate ? dispatch(updateProduct({ id: id, productData: values })) : dispatch(addProduct(values));\n      resetForm(); \n      closeModals()\n    },\n  });  \n  \n  const toggleDropdown = () => setIsDropdownOpen(!isDropdownOpen);\n\n  return (\n    <Conteiner >\n      <ClosingSymbol onClick={closeModals}>\n        <svg width={26} height={26}>\n          <use href={`${sprite}#icon-x`} />\n        </svg>   \n      </ClosingSymbol>\n\n      <Title>{ isUpdate  ? 'Edit product' :'Add a new product'}</Title>\n      <div>\n        <form onSubmit={formik.handleSubmit}>\n          <InputConteiner>\n            <ColumnConteiner>\n              <Input\n                name=\"name\"\n                type=\"text\"\n                onChange={formik.handleChange}\n                onBlur={formik.handleBlur} \n                value={formik.values.name}\n                placeholder=\"Product Info\"\n                haserror={formik.touched.name && formik.errors.name}\n              />\n\n              <Input\n                name=\"stock\"\n                type=\"text\"\n                onChange={formik.handleChange}\n                onBlur={formik.handleBlur} \n                value={formik.values.stock}\n                placeholder=\"Stock\"\n                haserror={formik.touched.stock && formik.errors.stock}\n              />\n\n              <Input\n                name=\"price\"\n                type=\"text\"\n                onChange={formik.handleChange}\n                onBlur={formik.handleBlur} \n                value={formik.values.price}\n                placeholder=\"Price\"\n                haserror={formik.touched.price && formik.errors.price}\n              />\n            </ColumnConteiner>\n\n            <ColumnConteiner>   \n              <ModalSelector\n                isDropdownOpen={isDropdownOpen}\n                toggleDropdown={toggleDropdown}\n                selectedCategory={selectedLevels}\n                setSelectedCategory={setSelectedLevels}\n                formik={formik}\n                categories={AVAILABLE_CATEGORIES}\n                hasError={formik.touched.category && formik.errors.category}\n                reservName={ existingProduct?.[1] }\n                fieldName=\"category\"\n              />\n              <Input\n                name=\"suppliers\"\n                type=\"text\"\n                onChange={formik.handleChange}\n                onBlur={formik.handleBlur} \n                value={formik.values.suppliers}\n                placeholder=\"Suppliers\"\n                haserror={formik.touched.suppliers && formik.errors.suppliers}\n              />\n            </ColumnConteiner>\n          </InputConteiner>\n\n          <BtnConteiner>\n            <CustomButton width=\"133px\" label=\"Add\"  type='submit'/>\n            <CustomButtonCansel width=\"133px\" label=\"Cansel\" onClick={closeModals} />        \n          </BtnConteiner>\n        </form>\n      </div>\n    </Conteiner>\n  );\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// import { useFormik } from 'formik';\n// import * as Yup from 'yup';\n\n// import { BtnConteiner, ClosingSymbol, ColumnConteiner, Conteiner, Dropdown, DropdownButton, DropdownItem, DropdownList, DropdownSvg, Input, InputConteiner, StyledSimpleBar, Title } from \"./Modals.styled\";\n// import sprite from '../../img/sprite.svg';\n// import CustomButton from \"components/CustomButton/CustomButton\";\n// import CustomButtonCansel from \"components/CustomButtonCansel/CustomButtonCansel\";\n// import { useEffect, useRef, useState } from 'react';\n// import { AVAILABLE_CATEGORIES } from 'components/Utils/utils';\n// import { useDispatch } from 'react-redux';\n// import { addProduct, updateProduct } from '../../redux/ePharmacy/operations';\n// import ModalSelector from './ModalSelector/ModalSelector';\n\n// const validationSchema = Yup.object({\n//   name: Yup.string().required('Product info is required'),\n//   category: Yup.string().oneOf(AVAILABLE_CATEGORIES, 'Invalid category').required('Category is required'),\n//   stock: Yup.number().required('Stock is required').positive('Stock must be positive'),\n//   suppliers: Yup.string().required('Suppliers are required'),\n//   price: Yup.number().required('Price is required').positive('Price must be positive'),\n// });\n\n// export default function ProductModals({ closeModals, isUpdate, existingProduct }) {  \n//   const [selectedLevels, setSelectedLevels] = useState(\"\");\n//   const [isDropdownOpen, setIsDropdownOpen] = useState(false);\n//   const dropdownRef = useRef(null);\n//   const dispatch = useDispatch();\n//   const id = existingProduct?.[5];\n\n//   useEffect(() => {\n//     const handleOutsideClick = (event) => {\n//       if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {\n//         // console.log(dropdownRef.current.contains(event.target))\n//         setIsDropdownOpen(false); \n//       }\n//     };\n//     document.addEventListener('mousedown', handleOutsideClick);\n//     return () => document.removeEventListener('mousedown', handleOutsideClick);\n//   }, []); \n\n//   const initialValues = isUpdate ? {\n//     name: existingProduct?.[0],\n//     category: existingProduct?.[1],\n//     stock: existingProduct?.[2], \n//     suppliers: existingProduct?.[3],\n//     price: existingProduct?.[4],\n//   } : {\n//     name: '',\n//     category: '',\n//     stock: '',\n//     suppliers: '',\n//     price: '',\n//   };\n\n//     // Инициализация Formik\n//   const formik = useFormik({\n//     initialValues: initialValues,\n//     validationSchema,\n//     onSubmit: (values, { resetForm }) => {\n//       isUpdate ? dispatch(updateProduct({ id: id, productData: values })) : dispatch(addProduct(values));\n//       resetForm(); \n//       closeModals()\n//     },\n//   });  \n  \n//   const toggleDropdown = () => setIsDropdownOpen(!isDropdownOpen);\n//   const handleItemClick = (level) => {\n//     setSelectedLevels(level); // Обновление локального состояния\n//     formik.setFieldValue('category', level); // Обновление состояния Formik\n//     setIsDropdownOpen(false); // Закрытие выпадающего списка\n//   };\n//   const handleDropdownButtonClick = (event) => {\n//     event.stopPropagation(); // Останавливаем всплытие события\n//     toggleDropdown(); // Ваша функция для открытия/закрытия выпадающего списка\n//   };\n\n//   return (\n//     <Conteiner >\n//       <ClosingSymbol onClick={closeModals}>\n//         <svg width={26} height={26}>\n//           <use href={`${sprite}#icon-x`} />\n//         </svg>   \n//       </ClosingSymbol>\n\n//       <Title>{ isUpdate  ? 'Edit product' :'Add a new product'}</Title>\n//       <div>\n//         <form onSubmit={formik.handleSubmit}>\n//           <InputConteiner>\n//             <ColumnConteiner>\n//               <Input\n//                 name=\"name\"\n//                 type=\"text\"\n//                 onChange={formik.handleChange}\n//                 onBlur={formik.handleBlur} \n//                 value={formik.values.name}\n//                 placeholder=\"Product Info\"\n//                 haserror={formik.touched.name && formik.errors.name}\n//               />\n\n//               <Input\n//                 name=\"stock\"\n//                 type=\"text\"\n//                 onChange={formik.handleChange}\n//                 onBlur={formik.handleBlur} \n//                 value={formik.values.stock}\n//                 placeholder=\"Stock\"\n//                 haserror={formik.touched.stock && formik.errors.stock}\n//               />\n\n//               <Input\n//                 name=\"price\"\n//                 type=\"text\"\n//                 onChange={formik.handleChange}\n//                 onBlur={formik.handleBlur} \n//                 value={formik.values.price}\n//                 placeholder=\"Price\"\n//                 haserror={formik.touched.price && formik.errors.price}\n//               />\n//             </ColumnConteiner>\n\n//             <ColumnConteiner>    \n//               {/* <Dropdown ref={dropdownRef} >\n//                 <DropdownSvg width={20} height={20} onClick={toggleDropdown} >\n//                     <use href={`${sprite}#icon-chevron-${isDropdownOpen ? 'up' : 'down'}`}  />\n//                 </DropdownSvg>\n//                 <DropdownButton type=\"button\" onClick={handleDropdownButtonClick} haserror={formik.touched.category && formik.errors.category}>{ selectedLevels || existingProduct?.[1] || \"Category\" }</DropdownButton>  \n//                 <DropdownList open={isDropdownOpen}>\n//                   <StyledSimpleBar style={{ maxHeight: 126 }}>\n//                     {AVAILABLE_CATEGORIES.map((category, index) => (\n//                       <DropdownItem key={index} onClick={() => handleItemClick(category)}>\n//                         {category}\n//                       </DropdownItem>\n//                     ))}\n//                   </StyledSimpleBar>\n//                 </DropdownList>                      \n//               </Dropdown> */}\n// <ModalSelector\n//   isDropdownOpen={isDropdownOpen}\n//   toggleDropdown={toggleDropdown}\n//   selectedCategory={selectedLevels}\n//   setSelectedCategory={setSelectedLevels}\n//   formik={formik}\n//   categories={AVAILABLE_CATEGORIES}\n//   hasError={formik.touched.category && formik.errors.category}\n// />\n//               <Input\n//                 name=\"suppliers\"\n//                 type=\"text\"\n//                 onChange={formik.handleChange}\n//                 onBlur={formik.handleBlur} \n//                 value={formik.values.suppliers}\n//                 placeholder=\"Suppliers\"\n//                 haserror={formik.touched.suppliers && formik.errors.suppliers}\n//               />\n//             </ColumnConteiner>\n//           </InputConteiner>\n\n//           <BtnConteiner>\n//             <CustomButton width=\"133px\" label=\"Add\"  type='submit'/>\n//             <CustomButtonCansel width=\"133px\" label=\"Cansel\" onClick={closeModals} />        \n//           </BtnConteiner>\n//         </form>\n//       </div>\n//     </Conteiner>\n//   );\n// }\n","import { useDispatch } from 'react-redux';\nimport sprite from '../../img/sprite.svg';\nimport { ActionConteiner } from './ActionBlock.styled';\nimport { deleteProduct } from '../../redux/ePharmacy/operations';\nimport PortalModal from 'components/PortalModal/PortalModal';\nimport { useState } from 'react';\nimport ProductModals from 'components/Modals/ProductModal';\n\nexport default function ActionBlock({ item }) { \n  const [openModal, setOpenModal] = useState(false);\n  const dispatch = useDispatch();\n  const id = item?.[5];\n//  console.log(id)\n  \n  const dellItem = () => {\n    dispatch(deleteProduct(id))\n  };  \n\n  return (        \n    <ActionConteiner>\n      <button >\n        <svg width={32} height={32} onClick={() => setOpenModal(true)}>\n          <use href={`${sprite}#icon-btn-edit`} />\n        </svg>\n      </button>\n\n      <button onClick={dellItem}>\n        <svg width={32} height={32}>\n          <use href={`${sprite}#icon-btn-dell`} />\n        </svg>\n      </button>\n      <PortalModal active={openModal} setActive={setOpenModal}>\n        <ProductModals closeModals={() => setOpenModal()} isUpdate={true} existingProduct={item} />\n      </PortalModal>\n    </ActionConteiner> \n  )\n}","import { AllConteinerBigTable, AllConteinersTable, TableHeader } from \"common/GiobalStyles\";\nimport {  StatucColor } from \"./ProductsAll.styled\";\nimport { Cell, Column, Table2 } from \"@blueprintjs/table\";\nimport color from \"common/GlobalColers\";\nimport ActionBlock from \"components/ActionBlock/ActionBlock\";\n\nexport default function ProductsAll({ products }) { \n  // const data = products ? products.map(({ name, category, stock, suppliers, price, _id }) => [ name, category, stock, suppliers, price, _id ]) : [];\n  const data = products ? products.map(({ name, category, stock, suppliers, price, _id }) => \n  [ name, category, stock, \n    Array.isArray(suppliers) ? suppliers.map(s => s.name).join(\", \") : suppliers, \n    price, _id \n  ]) : [];\n\n  const customCellRenderer = (rowIndex, columnId, data) => {\n    let content = data[rowIndex];\n    let style = {};\n    // console.log(content)\n    if ( columnId !== 'actions') {\n      style.borderRight = `1px solid ${color.blackPrimarySecondary}`;\n    }  \n\n    if (columnId === 'name') {\n      style.paddingLeft = '0px';\n    }\n\n    return (\n      <Cell style={style}>\n        {columnId === 'status' ? <StatucColor type={content}>{content}</StatucColor> : (\n          columnId === 'actions' ? <ActionBlock item={content}/> : content)}  \n      </Cell>\n    );\n  };\n\n  return (   \n    <AllConteinerBigTable>\n      <TableHeader>All products</TableHeader>\n      \n      <AllConteinersTable >\n        <Table2  \n          key={`table-${data}`}\n          numRows={data.length} \n          defaultRowHeight={76} \n          columnWidths={[276, 230, 199, 226, 163, 146 ]} \n          enableColumnResizing={false} \n          enableRowResizing={false} \n          enableRowHeader={false}\n        >\n          <Column name=\"Product Info\" cellRenderer={(rowIndex) => customCellRenderer(rowIndex, 'name', data.map(item => item[0]))} />\n          <Column name=\"Category\" cellRenderer={(rowIndex) => customCellRenderer(rowIndex, 'category', data.map(item => item[1]))} />\n          <Column name=\"Stock\" cellRenderer={(rowIndex) => customCellRenderer(rowIndex, 'stocks', data.map(item => item[2]))} />\n          <Column name=\"Suppliers\" cellRenderer={(rowIndex) => customCellRenderer(rowIndex, 'suppliers', data.map(item => item[3]))} />\n          <Column name=\"Price\" cellRenderer={(rowIndex) => customCellRenderer(rowIndex, 'price', data.map(item => item[4]))} />\n          <Column name=\"Action\" cellRenderer={(rowIndex) => customCellRenderer(rowIndex, 'actions', data)} />\n        </Table2>\n      </AllConteinersTable>\n    </AllConteinerBigTable>\n  )\n}","// import color from 'common/GlobalColers';\nimport styled from 'styled-components'\n\nexport const AddProductConteiner = styled.button`\n  display: flex;\n  justify-content: center; \n  align-items: center; \n  gap: 8px;\n`\nexport const AddProduct = styled.p`\n  font-size: 14px;\n`","import { ContentBlock, ContentContainer, FilterAddConteiner } from \"common/GiobalStyles\";\nimport UserNameFilter from \"components/UserNameFilter/UserNameFilter\";\nimport { productInf } from \"../../redux/ePharmacy/operations\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { selectProductsInf } from \"../../redux/ePharmacy/selector\";\nimport { useEffect, useState } from \"react\";\nimport ProductsAll from \"components/ProductsAll/ProductsAll\";\nimport { Pagination } from \"components/Pagination/Pagination\";\nimport { AddProduct, AddProductConteiner } from \"./Products.styled\";\nimport PortalModal from \"components/PortalModal/PortalModal\";\nimport ProductModals from \"components/Modals/ProductModal\";\n\nexport default function Products() {  \n  const dispatch = useDispatch();\n  const products = useSelector(selectProductsInf);  \n  const [currentPage, setCurrentPage] = useState(1);\n  const [filterName, setFilterName] = useState('');\n  const [openModal, setOpenModal] = useState(false);\n  const limitPerPage = 5;\n// console.log(products)\n  useEffect(() => {\n    dispatch(productInf({ page: currentPage, limit: limitPerPage, name: '' || filterName }));\n  }, [dispatch, currentPage, limitPerPage, filterName, products.total]);\n\n  const handlePageChange = (page) => {\n    setCurrentPage(page);\n  };\n  \n  const totalProducts = products.total || 0;\n  const totalPages = Math.ceil(totalProducts / limitPerPage);\n  return (\n    <ContentContainer>\n      <ContentBlock>\n        <FilterAddConteiner>\n          <UserNameFilter dataFactory={productInf} plholder=\"Product Name\" setFilterName={setFilterName} setCurrentPage={setCurrentPage}/>\n          <AddProductConteiner onClick={() => setOpenModal(true)} >\n\n            <svg width=\"42\" height=\"42\" viewBox=\"0 0 42 42\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n              <rect width=\"42\" height=\"42\" rx=\"21\" fill=\"#59B17A\"/>\n              <path d=\"M27 21H15M21 15V27V15Z\" stroke=\"white\" />\n            </svg>\n\n            <AddProduct>Add a new product</AddProduct>\n          </AddProductConteiner>\n        </FilterAddConteiner>\n\n        <div>\n          <ProductsAll products={products.products} />\n          <Pagination\n            currentPage={currentPage}\n            totalPages={totalPages}\n            onPageChange={handlePageChange}\n          />\n        </div>\n        \n        <PortalModal active={openModal} setActive={setOpenModal}>\n          <ProductModals closeModals={() => setOpenModal()} />\n        </PortalModal>\n\n      </ContentBlock>\n    </ContentContainer>\n  );\n}\n\n\n","import Products from \"components/Products/Products\";\n\nexport default function ProductsPage() {\n  return (\n    <Products />\n  );\n}  "],"names":["StatucColor","styled","_templateObject","_taggedTemplateLiteral","_ref","type","getStatusColor","_ref2","getBackgroundStatusColor","ActionConteiner","validationSchema","Yup","name","required","category","oneOf","AVAILABLE_CATEGORIES","stock","positive","suppliers","price","ProductModals","closeModals","isUpdate","existingProduct","_useState","useState","_useState2","_slicedToArray","selectedLevels","setSelectedLevels","_useState3","_useState4","isDropdownOpen","setIsDropdownOpen","dropdownRef","useRef","dispatch","useDispatch","id","useEffect","handleOutsideClick","event","current","contains","target","document","addEventListener","removeEventListener","initialValues","formik","useFormik","onSubmit","values","resetForm","updateProduct","productData","addProduct","_jsxs","Conteiner","children","_jsx","ClosingSymbol","onClick","width","height","href","concat","sprite","Title","handleSubmit","InputConteiner","ColumnConteiner","Input","onChange","handleChange","onBlur","handleBlur","value","placeholder","haserror","touched","errors","ModalSelector","toggleDropdown","selectedCategory","setSelectedCategory","categories","hasError","reservName","fieldName","BtnConteiner","CustomButton","label","CustomButtonCansel","ActionBlock","item","openModal","setOpenModal","deleteProduct","PortalModal","active","setActive","ProductsAll","products","data","map","_id","Array","isArray","s","join","customCellRenderer","rowIndex","columnId","content","style","borderRight","color","paddingLeft","Cell","AllConteinerBigTable","TableHeader","AllConteinersTable","Table2","numRows","length","defaultRowHeight","columnWidths","enableColumnResizing","enableRowResizing","enableRowHeader","Column","cellRenderer","AddProductConteiner","AddProduct","_templateObject2","Products","useSelector","selectProductsInf","currentPage","setCurrentPage","filterName","setFilterName","_useState5","_useState6","productInf","page","limit","total","totalProducts","totalPages","Math","ceil","ContentContainer","ContentBlock","FilterAddConteiner","UserNameFilter","dataFactory","plholder","viewBox","fill","xmlns","rx","d","stroke","Pagination","onPageChange","ProductsPage"],"sourceRoot":""}