{"version":3,"file":"static/js/695.c2948b57.chunk.js","mappings":"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","sources":["components/CustomButton/CustomButton.styled.js","components/Pagination/Pagination.styled.js","components/Pagination/Pagination.jsx","components/UserNameFilter/UserNameFilter.styled.js","components/CustomButton/CustomButton.jsx","components/UserNameFilter/UserNameFilter.jsx","components/Utils/utils.jsx","components/CustomersAll/CustomersAll.styled.js","components/CustomersAll/CustomersAll.jsx","components/Customers/Customers.jsx","pages/CustomersPage.jsx","redux/ePharmacy/selector.js"],"sourcesContent":["import color from 'common/GlobalColers'\nimport styled from 'styled-components'\n\nexport const CustomBtn = styled.button`\ndisplay: flex;\nalign-items: center;\njustify-content: center;\ngap: 8px;\n  font-size: 14px;\n  font-weight: 500;\n  line-height: 1.29;\n\n  height: 44px;\n  width: 100%;\n  border-radius: 60px;\n  color: ${color.white};\n  background: ${color.greenLight};\n  transition: background 0.3s linear;\n\n  &:hover,\n  &:focus {\n    /* color: ${color.blackLight}; */\n    background: ${color.greenDarker};  \n  }\n  \n  @media (min-width: 768px) {\n    /* font-size: 16px; */\n    /* padding: ${(props) => props.prop === 'true' ? '14px 28px' : '12px 28px'}; */\n  }\n`","import color from 'common/GlobalColers';\nimport styled from 'styled-components'\n\nexport const PaginationConteiner = styled.div`\n  display: flex;\n  justify-content: center; /* Центрирует содержимое по горизонтали */\n  align-items: center; \n`\n\nexport const PaginationButton = styled.button`\n  background: ${(props) => props.disabled ? color.greenLight : color.greenSupperLight}; /* Более тусклый фон для активной (отключенной) страницы */\n  margin-right: 17px;\n  width: 9px;\n  height: 9px;\n  border-radius: 50%;\n  \n  &:hover {\n    box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.7); \n  }\n\n  &:disabled {\n    cursor: default;\n    background: ${color.greenLight};\n    scale: 1.25;\n  }\n`;\n","import { PaginationButton, PaginationConteiner } from \"./Pagination.styled\";\n\nexport const Pagination = ({ currentPage, totalPages, onPageChange }) => {\n  const pages = [...Array(totalPages).keys()].map(num => num + 1);\n  return (\n    <PaginationConteiner>\n      {pages.map(page => (\n        <PaginationButton\n          key={page}\n          disabled={page === currentPage}\n          onClick={() => onPageChange(page)}\n        >\n          {/* {page} */}\n        </PaginationButton>\n      ))}      \n    </PaginationConteiner>\n  );\n};\n","import color from 'common/GlobalColers';\nimport styled from 'styled-components'\n\nexport const FilterConteiner = styled.div`\n  display: flex;\n  gap: 8px;\n  /* align-items: center;\n\n  width: 354px;\n  height: 44px;\n  background: red; */\n`\nexport const FilterForm = styled.form`\n  display: flex;\n  align-items: center;\n  gap: 14px;\n  width: 354px;\n`;\n\nexport const InputFilter = styled.input`\n  display: flex;\n  align-items: center;\n\n  min-width: 224px;\n  height: 44px;\n  border: 1px solid ${color.blackPrimarySecondary};\n  border-radius: 60px;\n  box-shadow: 0px -1px 5px 0px rgba(71, 71, 71, 0.05);\n  background: ${color.white};\n  padding: 13px 18px;\n\n  &::placeholder {\n    font-size: 12px; // Пример изменения размера текста плейсхолдера\n    color: ${color.textColorSecondary};\n  }\n`;\n\nexport const Button = styled.div`\n  width: 116px;\n`;","import { FilterIcon } from \"components/Utils/utils\";\nimport { CustomBtn } from \"./CustomButton.styled\";\n\nexport default function CustomButton({ className, label, onClick, icon }){\n  return (\n    <CustomBtn className={className} onClick={onClick} type=\"submit\" >\n      {icon && <FilterIcon />} \n      {label}\n    </CustomBtn>\n  );\n};","import { useFormik } from \"formik\";\nimport { Button, FilterConteiner, FilterForm, InputFilter } from \"./UserNameFilter.styled\";\n// import { customersInf, ordersInf } from \"../../redux/ePharmacy/operations\";\nimport { useDispatch } from \"react-redux\";\nimport * as Yup from 'yup';\nimport CustomButton from \"components/CustomButton/CustomButton\";\nimport { useState } from \"react\";\n// import { selectCustomersInf } from \"../../redux/ePharmacy/selector\";\n\nconst validationSchema = Yup.object({\n  userName: Yup.string()\n    .required('Required')\n    // Дополнительные правила валидации можно добавить здесь\n});\n\nexport default function UserNameFilter({dataFactory, plholder, setFilterName, setCurrentPage }) {  \n  const [isRestButtonVisible, setIsRestButtonVisible] = useState(false);\n  const dispatch = useDispatch();\n//   const customers = useSelector(selectCustomersInf);  \n// console.log(customers)\n  const formik = useFormik({\n    initialValues: {\n      userName: '',\n    },    \n    validationSchema: validationSchema,\n    onSubmit: values => {\n      setCurrentPage(1)\n      setFilterName( values.userName )\n      setIsRestButtonVisible(\"true\")\n      dispatch(dataFactory({ name: values.userName }));\n    },\n  });\n\n  const handleReset = () => {\n    setCurrentPage(1)\n    setFilterName( '' )\n    setIsRestButtonVisible(false);\n    dispatch(dataFactory({}))\n    formik.resetForm();\n  };\n\n  return (\n    <FilterConteiner>\n      <FilterForm onSubmit={formik.handleSubmit}>\n        <InputFilter\n          id=\"userName\"\n          name=\"userName\"\n          type=\"text\"\n          onChange={formik.handleChange}\n          value={formik.values.userName}\n          placeholder={plholder || \"User Name\"}\n        />\n        <CustomButton label=\"Filter\" type=\"submit\" icon={true} />\n      </FilterForm>\n      {isRestButtonVisible && (\n        <Button><CustomButton label=\"Rest\" onClick={() => handleReset()}/></Button>\n      )}\n    </FilterConteiner>\n  );\n}","import color from 'common/GlobalColers';\nimport sprite from '../../img/sprite.svg';\n\nexport const FilterIcon = () => (\n  <svg width=\"14\" height=\"14\">\n      <use href={`${sprite}#icon-filter`} />\n  </svg>\n);\n\nexport const getColor = (type) => {\n  switch (type) {\n    case 'Income':\n      return color.red;\n    case 'Expense':\n      return color.greenLight;\n    case 'Error':\n      return color.blackPrimary;\n    default:\n      return color.blackPrimary;\n  }\n};\n\nexport const getBackgroundColor = (type) => {\n  switch (type) {\n    case 'Income':\n      return color.redSecondary;\n    case 'Expense':\n      return color.greenSecondary;\n    case 'Error':\n      return color.blackPrimarySecondary;\n    default:\n      return color.blackPrimarySecondary;\n  }\n};\n\nexport const getStatusColor = (type) => {\n  switch (type) {\n    case 'Completed':\n      return color.greenLight;\n    case 'Confirmed':\n      return color.violet;\n    case 'Pending':\n      return color.orange;\n    case 'Cancelled':\n      return color.red;\n    case 'Processing':\n      return color.blue;\n    case 'Shipped':\n      return color.orange;\n    case 'Delivered':\n      return color.greenDarker;\n    default:\n      return color.blackPrimary;\n  }\n};\n\nexport const getBackgroundStatusColor = (type) => {\n  switch (type) {\n    case 'Completed':\n      return color.greenSecondary;\n    case 'Confirmed':\n      return color.violetSecondary;\n    case 'Pending':\n      return color.orangeSecondary;\n    case 'Cancelled':\n      return color.redSecondary;\n    case 'Processing':\n      return color.blueSecondary;\n    case 'Shipped':\n      return color.orangeSecondary;\n    case 'Delivered':\n      return color.greenSecondary;\n    default:\n      return color.blackPrimarySecondary;\n  }\n};\n\n\nexport const getActiveColor = (type) => {\n  switch (type) {\n    case 'Active':\n      return color.greenLight;\n    case 'Deactive':\n      return color.red;\n    default:\n      return color.blackPrimary;\n  }\n};\n\nexport const getBackgroundActiveColor = (type) => {\n  switch (type) {\n    case 'Active':\n      return color.greenSecondary;\n    case 'Deactive':\n      return color.redSecondary;\n    default:\n      return color.blackPrimarySecondary;\n  }\n};","import { getBackgroundStatusColor, getStatusColor } from 'components/Utils/utils'\nimport styled from 'styled-components'\n\n\nexport const StatucColor = styled.p`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 92px;\n  height: 25px;\n  color: ${({ type }) => getStatusColor(type)};\n  background: ${({ type }) => getBackgroundStatusColor(type)};\n\n  font-size: 14px;\n  border-radius: 40px;\n\n`","import { AllConteinerBigTable, AllConteinersTable, TableHeader } from \"common/GiobalStyles\";\nimport { StatucColor } from \"./CustomersAll.styled\";\nimport { Cell, Column, Table2 } from \"@blueprintjs/table\";\nimport color from \"common/GlobalColers\";\n\nexport default function CustomersAll({customers, currentPage }) { \n  const data = customers ? customers.map(({ image, name, email, address, phone, register_date, photo }) => [ image, name, email, address, phone, register_date, photo ]) : [];\n\n  const customCellRenderer = (rowIndex, columnId, data) => {\n    let content = data[rowIndex];\n    let style = {};\n\n    if ( columnId !== 'date') {\n      style.borderRight = `1px solid ${color.blackPrimarySecondary}`;\n    }  \n\n    if (columnId === 'date') {\n      const date = new Date(content);\n      content = date.toLocaleDateString('en-US', {\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric',\n      });\n    }\n\n    return (\n      <Cell style={style}>\n        {columnId === 'status' ? <StatucColor type={content}>{content}</StatucColor> : content}        \n      </Cell>\n    );\n  };\n\n\n  const customCellName = (rowIndex, columnId, data) => {\n    let style = {};\n    const rowData = data[rowIndex];\n    if (columnId === 'name') {\n      style.borderRight = `1px solid ${color.blackPrimarySecondary}`;\n    }\n  \n    if (columnId === 'name') {\n      style.paddingLeft = '0px';\n    }\n\n    return (\n      <Cell style={style}>\n        <div style={{ display: 'flex', alignItems: 'center' }}>\n          <img src={rowData[0]|| rowData[6]} alt={rowData[1]} style={{ width: '36px', height: '36px', marginRight: '10px', borderRadius: '50%' }} />\n          <p>{rowData[1]}</p>\n        </div>\n      </Cell>\n    );\n  };\n  return (   \n    <AllConteinerBigTable>\n      <TableHeader>All customers</TableHeader>\n      \n      <AllConteinersTable >\n        <Table2  \n          key={`table-${currentPage}-${data[0]}`}\n          numRows={data.length} \n          defaultRowHeight={76} \n          columnWidths={[260, 299, 213, 263, 205 ]} \n          enableColumnResizing={false} \n          enableRowResizing={false} \n          enableRowHeader={false}\n        >\n          <Column name=\"User Info\" cellRenderer={(rowIndex) => customCellName(rowIndex, 'name', data)} />\n          <Column name=\"Email\" cellRenderer={(rowIndex) => customCellRenderer(rowIndex, 'email', data.map(item => item[2]))} />\n          <Column name=\"Address\" cellRenderer={(rowIndex) => customCellRenderer(rowIndex, 'address', data.map(item => item[3]))} />\n          <Column name=\"Phone\" cellRenderer={(rowIndex) => customCellRenderer(rowIndex, 'phone', data.map(item => item[4]))} />\n          <Column name=\"Register date\" cellRenderer={(rowIndex) => customCellRenderer(rowIndex, 'date', data.map(item => item[5]))} />\n        </Table2>\n      </AllConteinersTable>\n    </AllConteinerBigTable>\n  )\n}","import { ContentBlock, ContentContainer } from \"common/GiobalStyles\";\nimport UserNameFilter from \"components/UserNameFilter/UserNameFilter\";\nimport { customersInf } from \"../../redux/ePharmacy/operations\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { selectCustomersInf } from \"../../redux/ePharmacy/selector\";\nimport { useEffect, useState } from \"react\";\nimport CustomersAll from \"components/CustomersAll/CustomersAll\";\nimport { Pagination } from \"components/Pagination/Pagination\";\n\nexport default function Customers() {  \n  const dispatch = useDispatch();\n  const customers = useSelector(selectCustomersInf);  \n  const [currentPage, setCurrentPage] = useState(1);\n  const [filterName, setFilterName] = useState('');\n  const limitPerPage = 5;\n\n  useEffect(() => {\n    dispatch(customersInf({ page: currentPage, limit: limitPerPage, name: '' || filterName }));\n  }, [dispatch, currentPage, limitPerPage, filterName]);\n\n  const handlePageChange = (page) => {\n    setCurrentPage(page);\n  };\n    // Предполагается, что ваш API возвращает общее количество доступных элементов\n  const totalCustomers = customers.total || 0;\n  const totalPages = Math.ceil(totalCustomers / limitPerPage);\n\n  return (\n    <ContentContainer>\n      <ContentBlock>\n\n        <UserNameFilter dataFactory={customersInf} setFilterName={setFilterName} setCurrentPage={setCurrentPage} />\n        <div>\n        <CustomersAll customers={customers.customers} currentPage={currentPage} />\n        <Pagination\n            currentPage={currentPage}\n            totalPages={totalPages}\n            onPageChange={handlePageChange}\n          />\n        </div>\n        \n      </ContentBlock>\n    </ContentContainer>\n  );\n}","import Customers from \"components/Customers/Customers\";\n\nexport default function CustomersPage() {  \n  return (\n    <Customers />\n  );\n}","export const selectDataInf = (state) => state.pharmacy.dashboarData;\n\nexport const selectOrdersInf = (state) => state.pharmacy.ordersData;\n\nexport const selectSuppliersInf = (state) => state.pharmacy.suppliersData;\n\nexport const selectProductsInf = (state) => state.pharmacy.productsData;\n\nexport const selectCustomersInf = (state) => state.pharmacy.customersData;\n"],"names":["CustomBtn","styled","_templateObject","_taggedTemplateLiteral","color","props","prop","PaginationConteiner","PaginationButton","_templateObject2","disabled","Pagination","_ref","currentPage","totalPages","onPageChange","pages","_toConsumableArray","Array","keys","map","num","_jsx","children","page","onClick","FilterConteiner","FilterForm","InputFilter","_templateObject3","Button","_templateObject4","CustomButton","className","label","icon","_jsxs","type","FilterIcon","validationSchema","Yup","userName","required","UserNameFilter","dataFactory","plholder","setFilterName","setCurrentPage","_useState","useState","_useState2","_slicedToArray","isRestButtonVisible","setIsRestButtonVisible","dispatch","useDispatch","formik","useFormik","initialValues","onSubmit","values","name","handleSubmit","id","onChange","handleChange","value","placeholder","resetForm","width","height","href","concat","sprite","getColor","getBackgroundColor","getStatusColor","getBackgroundStatusColor","getActiveColor","getBackgroundActiveColor","StatucColor","_ref2","CustomersAll","customers","data","image","email","address","phone","register_date","photo","customCellRenderer","rowIndex","columnId","content","style","borderRight","Date","toLocaleDateString","year","month","day","Cell","AllConteinerBigTable","TableHeader","AllConteinersTable","Table2","numRows","length","defaultRowHeight","columnWidths","enableColumnResizing","enableRowResizing","enableRowHeader","Column","cellRenderer","rowData","paddingLeft","display","alignItems","src","alt","marginRight","borderRadius","customCellName","item","Customers","useSelector","selectCustomersInf","_useState3","_useState4","filterName","useEffect","customersInf","limit","totalCustomers","total","Math","ceil","ContentContainer","ContentBlock","CustomersPage","selectDataInf","state","pharmacy","dashboarData","selectOrdersInf","ordersData","selectSuppliersInf","suppliersData","selectProductsInf","productsData","customersData"],"sourceRoot":""}